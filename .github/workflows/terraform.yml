name: Terraform Plan

on:
  push:
  pull_request:
    branches: [ master ]

env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

        #defaults:
        #run:
        #shell: bash
        #working-directory: dev

jobs:
  terraform_plan_dev:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: dev
        
    steps:
            
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      #- name: Terraform Format
      #  run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -out "tf_plan" 
        
      - name: Upload TF Plan
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan
          path: ./dev/tf_plan
          if-no-files-found: error
          retention-days: 1
   
      #- name: Terraform Apply
      #  run: |
      #   terraform show "tf_plan"
      #   terraform apply -auto-approve "tf_plan"
   
  terraform_apply_dev:
    runs-on: ubuntu-latest
    needs: [terraform_plan_dev]
    defaults:
      run:
        shell: bash
        working-directory: dev
    
    environment:
       name: tf_apply
    
    steps:
    
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Download TF Plan
        uses: actions/download-artifact@v2
        with:
          name: tf_plan
          path: ./dev/
      - name: Terraform Apply
        run: |
          #cat "tf_plan"
          terraform init
          terraform show "tf_plan"
          terraform apply -auto-approve "tf_plan"
  
  terraform_plan_prod:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: prod
        
    steps:
            
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      #- name: Terraform Format
      #  run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -out "tf_plan_prod" 
        
      - name: Upload TF Plan
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan_prod
          path: ./prod/tf_plan_prod
          if-no-files-found: error
          retention-days: 1
   
      #- name: Terraform Apply
      #  run: |
      #   terraform show "tf_plan"
      #   terraform apply -auto-approve "tf_plan"
   
  terraform_apply_prod:
    runs-on: ubuntu-latest
    needs: [terraform_plan_prod]
    defaults:
      run:
        shell: bash
        working-directory: prod
    
    environment:
       name: tf_apply_prod
    
    steps:
    
      - uses: actions/checkout@v2
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Download TF Plan
        uses: actions/download-artifact@v2
        with:
          name: tf_plan_prod
          path: ./prod/
      - name: Terraform Apply
        run: |
          #cat "tf_plan"
          terraform init
          terraform show "tf_plan_prod"
          terraform apply -auto-approve "tf_plan_prod"
    
  push_to_source_repo:
        runs-on: ubuntu-latest
        name: Push to source repo

        steps:
        #- name: Checkout Project A
        #  uses: actions/checkout@v2
        #  with:
        #   path: ./projectA

        - name: Checkout source repo
          uses: actions/checkout@master
          with: 
            repository: doskochynskyi/MentorGit
            token: ${{ secrets.GA_PushToMentorGit }}
            path: ./MentorGit

        - name: Copy/Create file
          run: |
            mkdir ./dev
            mkdir ./prod
            devEnvFile=./dev/envdata
            echo "RESOURCE_GROUP=RGdev" > $devEnvFile
            echo "VNET_NAME=tfvnetdev" >> $devEnvFile
            prodEnvFile=./prod/envdata
            echo "RESOURCE_GROUP=RGprod" > $prodEnvFile
            echo "VNET_NAME=tfvnetprod" >> $prodEnvFile
            #diffresult = diff "./MentorGit/deploy-env/dev/" "./envdata"
            #echo ${diffresult}
            #if [  ]; then
              echo "Copying $FILE"
              cp -R ./dev/envdata ./MentorGit/deploy-env/dev/
              cp -R ./prod/envdata ./MentorGit/deploy-env/prod/
              cat ./MentorGit/deploy-env/dev/envdata
              cd ./MentorGit            
              git add .
              git config user.name Ivan
              git config user.email ivan.doskochynskyi@gmail.com
              git commit -am "Config file copied from MentorTF module"
              git push
            #else 
            #  echo "files are equal"
              # touch ./envdataTF
            #fi
           
        #- name: Diff result
        #  run: |
        #    echo ${diffresult}  

        #- name: Push to MentorGit
        #  run: |
        #    cat ./MentorGit/deploy-env/dev/envdataTF
        #    cd ./MentorGit            
        #    git add .
        #    git config user.name Ivan
        #    git config user.email ivan.doskochynskyi@gmail.com
        #    git commit -am "Config file copied from MentorTF module"
        #    git push
